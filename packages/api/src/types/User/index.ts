import type { Asset } from "../Common"

export const RelationshipTypeEnum = {
  None:         'None',
  User:         'User',
  Friend:       'Friend',
  Outgoing:     'Outgoing',
  Incoming:     'Incoming',
  Blocked:      'Blocked',
  BlockedOther: 'BlockedOther',
} as const

export type RelationshipType =
  keyof typeof RelationshipTypeEnum

export const UserPresenceEnum = {
  Online:     'Online',
  Idle:       'Idle',
  Focus:      'Focus',
  Busy:       'Busy',
  Invisible:  'Invisible'
} as const

export type UserPresence = keyof typeof UserPresenceEnum

export enum FieldsUser {
  Avatar            = 'Avatar',
  StatusText        = 'StatusText',
  StatusPresence    = 'StatusPresence',
  ProfileContent    = 'ProfileContent',
  ProfileBackground = 'ProfileBackground',
  DisplayName       = 'DisplayName'
}

export type UserRelation = {
  _id: string
  status: RelationshipType
}

export type UserStatus = {
  text?: string | null
  presence?: UserPresence | null
}

export type UserProfile = {
  content: string
  background: Asset
}

export type RevoltUser = {
  _id: string
  username: string
  discriminator: string
  display_name?: string | null
  avatar?: Asset | null
  relations?: UserRelation[] | null
  badges?: number | null
  status?: UserStatus | null
  profile?: UserProfile | null
  flags?: number | null
  privileged?: boolean
  bot?: { owner: string } | null
  relationship: RelationshipType
  online: boolean | null
}

export type RevoltMember = {
  /**
   * Composite primary key consisting of server and user id
   */
  _id: { server: string, user: string }

  /**
   * ISO8601 formatted timestamp representing the date that the
   * user joined the server
   */
  joined_at: string

  /**
   * Member's nickname on the server
   */
  nickname?: string | null

  /**
   * Representation of a File on Revolt generated by Autumn
   * (asset)
   */
  avatar?: Asset | null

  /**
   * Member's roles in the server
   */
  roles?: string[]

  /**
   * ISO8601 formatted timestamp representing the amount of time
   * that the member is timed out for
   */
  timeout?: string | null
}
